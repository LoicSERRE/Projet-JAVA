/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaproject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.Toolkit;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 *
 * @author BORRAT Joan et SERRE Loïc
 */
/** login page class */
public class login extends javax.swing.JFrame {

    /**
     * Creates new form login
     */
    /** class constructor */
    public login(String s) {
        super(s);
        initComponents();
    }

    /** encrypt the given string */
    public String encrypt(String password, String key_String) {
        SecretKey key = new SecretKeySpec(pswkey.getBytes(), "AES");
        AES aes = new AES(key);
        password = aes.encrypt(password);
        return password;
    }

    /** convert char array to string */
    public String chartostr(char[] c) {
        String s = "";
        for (int i = 0; i < c.length; i++)
            s += c[i];
        return s;
    } // GEN-LAST:function_chartostr

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    /**
     * initialize all the components by putting them in the right place with the
     * right values
     */
    private void initComponents() {

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("hesslaneicon2.png")));
        titlelogin = new javax.swing.JLabel();
        passwordfield = new javax.swing.JPasswordField();
        printpassword = new javax.swing.JCheckBox();
        connectbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titlelogin.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        titlelogin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlelogin.setText("Connexion à Hesslane");

        passwordfield.setFont(new java.awt.Font("Unispace", 0, 28)); // NOI18N

        printpassword.setFont(new java.awt.Font("Unispace", 0, 18)); // NOI18N
        printpassword.setText("Afficher le mot de passe");
        printpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printpasswordActionPerformed(evt);
            }
        });

        connectbutton.setFont(new java.awt.Font("Unispace", 0, 32)); // NOI18N
        connectbutton.setText("Se connecter");
        connectbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    connectbuttonActionPerformed(evt);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(titlelogin, javax.swing.GroupLayout.PREFERRED_SIZE, 514,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(printpassword)
                                        .addComponent(passwordfield, javax.swing.GroupLayout.PREFERRED_SIZE, 369,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(connectbutton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(titlelogin)
                                .addGap(77, 77, 77)
                                .addComponent(passwordfield, javax.swing.GroupLayout.PREFERRED_SIZE, 52,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printpassword)
                                .addGap(74, 74, 74)
                                .addComponent(connectbutton)
                                .addContainerGap(62, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * check if the button
     * is good, if so it
     * launches the class
     * connected and
     * closes login
     * otherwise it stops
     * the program
     */
    private void connectbuttonActionPerformed(java.awt.event.ActionEvent evt) throws IOException {/**
                                                                                                   * check if the button
                                                                                                   * is good, if so it
                                                                                                   * launches the class
                                                                                                   * connected and
                                                                                                   * closes login
                                                                                                   * otherwise it stops
                                                                                                   * the program
                                                                                                   */
        // TODO add your handling code here:
        if (!new File("loic.joan").exists()) {
            new File("loic.joan").createNewFile();
            FileWriter fw = new FileWriter("loic.joan");
            String mdp = String.valueOf(encrypt(chartostr(passwordfield.getPassword()), pswkey));
            fw.write(mdp);
            fw.close();
        } else {
            FileReader fr = new FileReader("loic.joan");
            BufferedReader br = new BufferedReader(fr);
            String mdp = br.readLine();
            br.close();
            String getmdp = chartostr(passwordfield.getPassword());
            if (evt.getActionCommand().equals("Se connecter")) {
                if (mdp.equals(encrypt(getmdp, pswkey))) {
                    setVisible(false);
                    connected connect = new connected("Hesslane");
                    connect.setLocationRelativeTo(null);
                    connect.setVisible(true);
                    connect.setSize(1300, 900);
                    connect.filetovector();
                } else {
                    System.exit(0);
                }
            }
        }
    }// GEN-LAST:event_connectbuttonActionPerformed

    /**
     * allows to display or not the password
     */
    private void printpasswordActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (printpassword.isSelected()) {
            passwordfield.setEchoChar((char) 0);
        } else {
            passwordfield.setEchoChar('*');
        }
    }// GEN-LAST:event_printpasswordActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectbutton;
    private javax.swing.JPasswordField passwordfield;
    private javax.swing.JCheckBox printpassword;
    private javax.swing.JLabel titlelogin;
    private String pswkey = "GckINKg<$8Tk5i<FSUUyk_5x";
    // End of variables declaration//GEN-END:variables
}
