/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaproject;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.*;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.*;
import java.security.Key;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 *
 * @author BORRAT Joan et SERRE Loïc
 */
/** class of the main page */
public class connected extends JFrame implements ActionListener {

    /**
     * Creates new form connected
     */
    /** class constructor */
    public connected(String s) {
        super(s);
        passwordLogin = "bonjour";
        titlevector = new Vector<String>();
        passwordvector = new Vector<String>();
        idvector = new Vector<String>();
        datevector = new Vector<String>();
        index = -1;
        model = new DefaultListModel<String>();
        initComponents();
        filetovector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    /**
     * initialize all the components by putting them in the right place with the
     * right values
     */
    private void initComponents() {

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("hesslaneicon2.png")));

        jPanel1 = new javax.swing.JPanel();
        passwordbutton = new javax.swing.JButton();
        generatorbutton = new javax.swing.JButton();
        notebutton = new javax.swing.JButton();
        infopersobutton = new javax.swing.JButton();
        titleapp = new javax.swing.JLabel();
        titlefunction = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        passwordlist = new javax.swing.JList<>();
        disconnectbutton = new javax.swing.JButton();
        addpswbutton = new javax.swing.JButton();
        rightpanel = new javax.swing.JPanel();
        idlabel = new javax.swing.JLabel();
        passwordlabel = new javax.swing.JLabel();
        datelabel = new javax.swing.JLabel();
        idfield = new javax.swing.JTextField();
        passwordfield = new javax.swing.JPasswordField();
        printpassword = new javax.swing.JCheckBox();
        copypsw = new javax.swing.JButton();
        day = new javax.swing.JComboBox<>();
        month = new javax.swing.JComboBox<>();
        years = new javax.swing.JComboBox<>();
        addinvector = new javax.swing.JButton();
        deleteinvector = new javax.swing.JButton();
        rightpanel = new javax.swing.JPanel();
        copypsw = new javax.swing.JButton();

        jScrollPane1.setVisible(false);
        passwordlist.setVisible(false);
        rightpanel.setVisible(false);
        addpswbutton.setVisible(false);
        addinvector.setVisible(false);
        deleteinvector.setVisible(false);

        JMenuBar menubar = new JMenuBar();
        JMenu file = new JMenu("Fichier");
        JMenuItem item = new JMenuItem("Enregistrer les données");
        JMenuItem psw = new JMenuItem("Changer le mot de passe");
        JMenuItem leave = new JMenuItem("Quitter");
        file.add(item);
        file.add(psw);
        file.add(leave);
        JMenu help = new JMenu("Aide");
        JMenuItem about = new JMenuItem("A propos");
        JMenuItem credit = new JMenuItem("Crédits");
        help.add(credit);
        help.add(about);
        menubar.add(file);
        menubar.add(help);
        setJMenuBar(menubar);

        leave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                leavebuttonActionPerformed();
            }
        });

        about.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                JOptionPane.showMessageDialog(null,
                        "Projet Java - Gestionnaire de mots de passe, notes et informations personnelles", "A propos",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        });

        item.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                VectorToFile();
            }
        });

        psw.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                JFrame changepsw = new JFrame("Changer le mot de passe");
                changepsw.setSize(390, 420);
                changepsw.setLocationRelativeTo(null);
                changepsw.setResizable(false);
                changepsw.setVisible(true);
                changepsw.setIconImage(
                        Toolkit.getDefaultToolkit().getImage(getClass().getResource("hesslaneicon2.png")));
                JPanel panel = new JPanel();
                changepsw.setContentPane(panel);
                panel.setLayout(null);
                JLabel label = new JLabel("Changement de mot de passe");
                label.setFont(new Font("Unispace", java.awt.Font.BOLD, 20));
                label.setBounds(25, 10, 350, 20);
                panel.add(label);

                JLabel label2 = new JLabel("Votre ancien mot de passe");
                label2.setFont(new Font("Unispace", java.awt.Font.BOLD, 15));
                label2.setBounds(10, 70, 300, 20);
                panel.add(label2);
                JPasswordField psworigin = new JPasswordField();
                psworigin.setFont(new Font("Unispace", java.awt.Font.BOLD, 15));
                psworigin.setBounds(10, 100, 300, 30);
                panel.add(psworigin);

                JLabel label3 = new JLabel("Votre nouveau mot de passe");
                label3.setFont(new Font("Unispace", java.awt.Font.BOLD, 15));
                label3.setBounds(10, 145, 300, 20);
                panel.add(label3);
                JPasswordField newpsw = new JPasswordField();
                newpsw.setFont(new Font("Unispace", java.awt.Font.BOLD, 15));
                newpsw.setBounds(10, 175, 300, 30);
                panel.add(newpsw);

                JLabel label4 = new JLabel("Confirmez votre nouveau mot de passe");
                label4.setFont(new Font("Unispace", java.awt.Font.BOLD, 15));
                label4.setBounds(10, 215, 400, 20);
                panel.add(label4);
                JPasswordField validnewpsw = new JPasswordField();
                validnewpsw.setFont(new Font("Unispace", java.awt.Font.BOLD, 15));
                validnewpsw.setBounds(10, 245, 300, 30);
                panel.add(validnewpsw);

                JButton button = new JButton("Valider");
                button.setFont(new Font("Unispace", java.awt.Font.BOLD, 18));
                button.setBounds(100, 300, 200, 50);
                panel.add(button);

                button.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent event) {
                        if (chartostr(psworigin.getPassword()).equals(passwordLogin)) {
                            if (chartostr(newpsw.getPassword()).equals(chartostr(validnewpsw.getPassword()))) {
                                passwordLogin = chartostr(newpsw.getPassword());
                                changepswinfile();
                                changepsw.dispose();
                            } else {
                                JOptionPane.showMessageDialog(null, "Les deux mots de passe ne sont pas identiques",
                                        "Erreur", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Le mot de passe d'origine est incorrect", "Erreur",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }
                });
            }
        });

        credit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                JOptionPane.showMessageDialog(null,
                        "Projet JAVA - Gestionnaire de mots de passe\nRéalisé par : \n- BORRAT Joan\n - SERRE Loïc",
                        "Informations", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        passwordbutton.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        passwordbutton.setText("Mots de passe");
        passwordbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordbuttonActionPerformed(evt);
            }
        });

        generatorbutton.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        generatorbutton.setText("Générateur");
        generatorbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorbuttonActionPerformed(evt);
            }
        });

        notebutton.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        notebutton.setText("Notes");
        notebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notebuttonActionPerformed(evt);
            }
        });

        infopersobutton.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        infopersobutton.setText("Informations personnelles");
        infopersobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infopersobuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(notebutton, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(infopersobutton, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(generatorbutton, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(passwordbutton, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(passwordbutton)
                                .addGap(18, 18, 18)
                                .addComponent(generatorbutton)
                                .addGap(18, 18, 18)
                                .addComponent(infopersobutton)
                                .addGap(18, 18, 18)
                                .addComponent(notebutton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        titleapp.setFont(new java.awt.Font("Unispace", 0, 43)); // NOI18N
        titleapp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleapp.setText("Hesslane");

        titlefunction.setFont(new java.awt.Font("Unispace", 0, 36)); // NOI18N
        titlefunction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlefunction.setText("Bienvenue sur Hesslane");

        passwordlist.setFont(new java.awt.Font("Unispace", 0, 18)); // NOI18N
        passwordlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordlistMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(passwordlist);
        passwordlist.setModel(model);

        disconnectbutton.setFont(new java.awt.Font("Unispace", 0, 30)); // NOI18N
        disconnectbutton.setText("Déconnexion");
        disconnectbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectbuttonActionPerformed(evt);
            }
        });

        addpswbutton.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        addpswbutton.setText("Ajouter");
        addpswbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpswbuttonActionPerformed(evt);
            }
        });

        idlabel.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        idlabel.setText("Identifiant :");

        passwordlabel.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        passwordlabel.setText("Mot de passe :");

        datelabel.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        datelabel.setText("Date d'expiration :");

        idfield.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N

        passwordfield.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N

        printpassword.setFont(new java.awt.Font("Unispace", 0, 16)); // NOI18N
        printpassword.setText("Afficher le mot de passe");
        printpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printpasswordActionPerformed(evt);
            }
        });

        copypsw.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        copypsw.setText("Copier");
        copypsw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copypswActionPerformed(evt);
            }
        });

        day.setFont(new java.awt.Font("Unispace", 0, 18)); // NOI18N
        day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07",
                "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24",
                "25", "26", "27", "28", "29", "30", "31" }));

        month.setFont(new java.awt.Font("Unispace", 0, 18)); // NOI18N
        month.setModel(new javax.swing.DefaultComboBoxModel<>(
                new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        years.setFont(new java.awt.Font("Unispace", 0, 18)); // NOI18N
        years.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2023", "2024", "2025", "2026",
                "2027", "2028", "2029", "2030", "2031", "2032" }));

        addinvector.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        addinvector.setText("Sauvegarder");
        addinvector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addinvectorActionPerformed(evt);
            }
        });

        deleteinvector.setFont(new java.awt.Font("Unispace", 0, 24)); // NOI18N
        deleteinvector.setText("Supprimer");
        deleteinvector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteinvectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightpanelLayout = new javax.swing.GroupLayout(rightpanel);
        rightpanel.setLayout(rightpanelLayout);
        rightpanelLayout.setHorizontalGroup(
                rightpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rightpanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(rightpanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(rightpanelLayout.createSequentialGroup()
                                                .addComponent(idlabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(idfield, javax.swing.GroupLayout.PREFERRED_SIZE, 354,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(rightpanelLayout.createSequentialGroup()
                                                .addComponent(passwordlabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(rightpanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(rightpanelLayout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addComponent(printpassword))
                                                        .addGroup(rightpanelLayout.createSequentialGroup()
                                                                .addGroup(rightpanelLayout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(deleteinvector)
                                                                        .addComponent(passwordfield,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                317,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(copypsw))))
                                        .addGroup(rightpanelLayout.createSequentialGroup()
                                                .addGroup(rightpanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(addinvector)
                                                        .addGroup(rightpanelLayout.createSequentialGroup()
                                                                .addComponent(datelabel)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(day,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(years, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        rightpanelLayout.setVerticalGroup(
                rightpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rightpanelLayout.createSequentialGroup()
                                .addContainerGap(246, Short.MAX_VALUE)
                                .addGroup(rightpanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(rightpanelLayout.createSequentialGroup()
                                                .addGroup(rightpanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(idlabel)
                                                        .addComponent(idfield, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(71, 71, 71))
                                        .addGroup(rightpanelLayout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(passwordfield, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(passwordlabel)
                                                .addComponent(copypsw)))
                                .addComponent(printpassword)
                                .addGap(18, 18, 18)
                                .addGroup(
                                        rightpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(datelabel)
                                                .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(years, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(
                                        rightpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(deleteinvector)
                                                .addComponent(addinvector))
                                .addGap(146, 146, 146)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(titleapp, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(disconnectbutton))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 159,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(addpswbutton,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 159,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(rightpanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(titlefunction, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(titleapp, javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addComponent(titlefunction)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(addpswbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 39,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(23, 23, 23))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(rightpanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(82, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(disconnectbutton)
                                                .addGap(37, 37, 37)))));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * remove the selected element from the
     * list of vestors
     */
    private void deleteinvectorActionPerformed(java.awt.event.ActionEvent evt) {

        model.removeElement(passwordlist.getSelectedValue());
        titlevector.removeElement(passwordlist.getSelectedValue());
        idvector.removeElement(idfield.getText());
        passwordvector.removeElement(idfield.getText());
        passwordvector.removeElement(chartostr(passwordfield.getPassword()));
        idfield.setText("");
        passwordfield.setText("");
        day.setSelectedIndex(0);
        month.setSelectedIndex(0);
        years.setSelectedIndex(0);
        datevector.removeElement(day.getSelectedItem() + "/" + month.getSelectedItem() + "/" + years.getSelectedItem());
    }// GEN-LAST:event_deleteinvectorActionPerformed

    /** stock new give in vector */
    private void addinvectorActionPerformed(java.awt.event.ActionEvent evt) {

        if (index == -1) {
            JOptionPane.showMessageDialog(null, "Il n'y a pas de mot de passe selectionné");
        } else if (index >= passwordvector.size()) {
            JOptionPane.showMessageDialog(null, "Il n'y a pas de mot de passe selectionné");
        } else {
            idvector.set(index, idfield.getText());
            passwordvector.set(index, chartostr(passwordfield.getPassword()));
            datevector.set(index,
                    day.getSelectedItem() + "/" + month.getSelectedItem() + "/" + years.getSelectedItem());
            issaved = false;
        }

    }// GEN-LAST:event_addinvectorActionPerformed

    /** allows to get the day of the given string */
    private String getday(String s) {
        String day = "";
        day += s.charAt(0);
        day += s.charAt(1);
        return day;
    }

    /** allows to get the month of the given string */
    private String getmonth(String s) {
        String month = "";
        month += s.charAt(3);
        month += s.charAt(4);
        return month;
    }

    /** allows to get the years of the given string */
    private String getyears(String s) {
        String years = "";
        years += s.charAt(6);
        years += s.charAt(7);
        years += s.charAt(8);
        years += s.charAt(9);
        return years;
    }

    /**
     * display the element and give them of the
     * selected element
     */
    private void passwordlistMouseClicked(java.awt.event.MouseEvent evt) {

        // clear all field
        if (index != passwordlist.getSelectedIndex()) {
            idfield.setText("");
            passwordfield.setText("");
            day.setSelectedItem("01");
            month.setSelectedItem("01");
            years.setSelectedItem("2022");
            index = passwordlist.getSelectedIndex();
            idfield.setText(idvector.elementAt(index));
            passwordfield.setText(passwordvector.elementAt(index));
            day.setSelectedItem(getday(datevector.elementAt(index)));
            month.setSelectedItem(getmonth(datevector.elementAt(index)));
            years.setSelectedItem(getyears(datevector.elementAt(index)));
        }
    }// GEN-LAST:event_passwordlistMouseClicked

    /** change the passwords in the file while encrypting it */
    private void changepswinfile() {
        File file = new File("loic.joan");
        Vector<String> temp = new Vector<String>();
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            SecretKey key = new SecretKeySpec(pswkey.getEncoded(), "AES");
            AES aes = new AES(key);
            String line = br.readLine();
            while ((line = br.readLine()) != null) {
                temp.add(line);
            }
            fr.close();
            br.close();
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(aes.encrypt(passwordLogin));
            bw.write("\n");
            for (int i = 0; i < temp.size(); i++) {
                bw.write(temp.get(i));
                bw.write("\n");
            }
            bw.close();
            fw.close();
        } catch (Exception e) {
        }
    }

    /**
     * displays the graphical part of
     * password management
     */
    private void passwordbuttonActionPerformed(java.awt.event.ActionEvent evt) {

        rightpanel.setVisible(true);
        passwordlist.setVisible(true);
        jScrollPane1.setVisible(true);
        addpswbutton.setVisible(true);
        addinvector.setVisible(true);
        deleteinvector.setVisible(true);
        idfield.setVisible(true);
        passwordfield.setVisible(true);
        day.setVisible(true);
        month.setVisible(true);
        years.setVisible(true);
        titlefunction.setText("Paramètres du mot de passe");
    }// GEN-LAST:event_passwordbuttonActionPerformed

    /**
     * hides the graphical part of the
     * password management
     */
    private void generatorbuttonActionPerformed(java.awt.event.ActionEvent evt) {
        pswgenerator pswg = new pswgenerator("Hesslane generator");
        pswg.setVisible(true);
        pswg.setLocationRelativeTo(null);
        pswg.setIconImage(Toolkit.getDefaultToolkit().getImage("hesslaneicon2.png"));

    }// GEN-LAST:event_generatorbuttonActionPerformed

    /**
     * hides the graphical part of the password
     * management
     */
    private void notebuttonActionPerformed(java.awt.event.ActionEvent evt) {

        rightpanel.setVisible(false);
        passwordlist.setVisible(false);
        jScrollPane1.setVisible(false);
        addpswbutton.setVisible(false);
        titlefunction.setText("Vos notes sécurisées");
    }// GEN-LAST:event_notebuttonActionPerformed

    /**
     * hides the graphical part of the
     * password management
     */
    private void infopersobuttonActionPerformed(java.awt.event.ActionEvent evt) {

        rightpanel.setVisible(false);
        passwordlist.setVisible(false);
        jScrollPane1.setVisible(false);
        addpswbutton.setVisible(false);
        titlefunction.setText("Informations personnelles");
    }// GEN-LAST:event_infopersobuttonActionPerformed

    /**
     * displays a popup to ask if it is
     * safe to disconnect, if the file is
     * not saved it asks if the user wants
     * to save it
     */
    private void disconnectbuttonActionPerformed(java.awt.event.ActionEvent evt) {
        if (!issaved) {
            JFrame pop = new JFrame("Sauvegarder");
            pop.setSize(300, 130);
            setResizable(false);
            pop.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            pop.setLocationRelativeTo(null);
            JLabel TxtsavePop = new JLabel("Voulez-vous sauvegarder ?");
            TxtsavePop.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 20));
            JButton ButtonOuiPop = new JButton("Oui");
            ButtonOuiPop.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 16));
            JButton ButtonNonPop = new JButton("Non");
            ButtonNonPop.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 16));
            JButton ButtonAnnulerPop = new JButton("Annuler");
            ButtonAnnulerPop.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 16));
            JPanel PanelPop = new JPanel();
            pop.add(PanelPop);
            PanelPop.add(TxtsavePop);
            PanelPop.add(ButtonOuiPop);
            PanelPop.add(ButtonNonPop);
            PanelPop.add(ButtonAnnulerPop);

            ButtonOuiPop.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    VectorToFile();
                    LeaveRequest();
                    pop.dispose();
                }
            });
            ButtonNonPop.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    DisconnectRequest();
                    pop.dispose();
                }
            });
            ButtonAnnulerPop.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    pop.dispose();
                }
            });
            pop.setVisible(true);
        } else {
            DisconnectRequest();
        }
    }// GEN-LAST:event_disconnectbuttonActionPerformed

    /** convert char array to string */
    public String chartostr(char[] c) {
        String s = "";
        for (int i = 0; i < c.length; i++)
            s += c[i];
        return s;
    } // GEN-LAST:function_chartostr

    /**
     * displays a popup that allows you to
     * enter the name of the site for password
     * management and adds it to the list
     */
    private void addpswbuttonActionPerformed(java.awt.event.ActionEvent evt) {

        JOptionPane jop = new JOptionPane();
        String titlesite = jop.showInputDialog(null, "Entrez le nom du site", "Ajouter un mot de passe",
                JOptionPane.QUESTION_MESSAGE);
        model.addElement(titlesite);
        passwordlist.setModel(model);
        titlevector.add(titlesite);
        passwordvector.add("");
        idvector.add("");
        datevector.add("01/01/2022");

    }// GEN-LAST:event_addpswbuttonActionPerformed

    /**
     * allows you to show or hide the
     * password
     */
    private void printpasswordActionPerformed(java.awt.event.ActionEvent evt) {

        if (printpassword.isSelected())
            passwordfield.setEchoChar((char) 0);
        else
            passwordfield.setEchoChar('*');
    }// GEN-LAST:event_printpasswordActionPerformed

    /** copy password to clipboard */
    private void copypswActionPerformed(java.awt.event.ActionEvent evt) {

        String password = chartostr(passwordfield.getPassword());
        StringSelection stringSelection = new StringSelection(password);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
    }// GEN-LAST:event_copypswActionPerformed

    /**
     * displays a popup to ask if it is safe to close the application, if the
     * file is not saved, it asks if the user wants to save it
     */
    private void leavebuttonActionPerformed() {
        if (!issaved) {
            JFrame pop = new JFrame("Sauvegarder");
            pop.setSize(300, 200);
            pop.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            pop.setLocationRelativeTo(null);
            JLabel TxtsavePop = new JLabel("Voulez-vous sauvegarder ?");
            JButton ButtonOuiPop = new JButton("Oui");
            JButton ButtonNonPop = new JButton("Non");
            JButton ButtonAnnulerPop = new JButton("Annuler");
            JPanel PanelPop = new JPanel();
            pop.add(PanelPop);

            PanelPop.add(TxtsavePop);
            PanelPop.add(ButtonOuiPop);
            PanelPop.add(ButtonNonPop);
            PanelPop.add(ButtonAnnulerPop);

            ButtonOuiPop.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    VectorToFile();
                    LeaveRequest();
                    pop.dispose();
                }
            });
            ButtonNonPop.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    LeaveRequest();
                    pop.dispose();
                }
            });
            ButtonAnnulerPop.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    pop.dispose();
                }
            });
            pop.setVisible(true);
        } else {
            LeaveRequest();
        }
    }// GEN-LAST:event_leavebuttonActionPerformed

    /** isplays a pop-up to ask if it is safe to close the application */
    private void LeaveRequest() {
        JFrame pop = new JFrame("Quitter");
        pop.setSize(300, 200);
        pop.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pop.setLocationRelativeTo(null);
        JLabel TxtsavePop = new JLabel("Voulez-vous vous quitter ?");
        JButton ButtonQuitterPop = new JButton("Quitter");
        JButton ButtonAnnulerPop = new JButton("Annuler");
        JPanel PanelPop = new JPanel();
        pop.add(PanelPop);

        PanelPop.add(TxtsavePop);
        PanelPop.add(ButtonQuitterPop);
        PanelPop.add(ButtonAnnulerPop);
        ButtonAnnulerPop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                pop.dispose();
            }
        });
        ButtonQuitterPop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        pop.setVisible(true);
    }

    /** displays a pop-up to ask if it is safe to log out */
    private void DisconnectRequest() {
        JFrame pop = new JFrame("Déconnecter");
        pop.setSize(400, 150);
        pop.setResizable(false);
        pop.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pop.setLocationRelativeTo(null);
        JLabel TxtsavePop = new JLabel("Voulez-vous vous déconnecter ?");
        TxtsavePop.setFont(new java.awt.Font("Arial", 0, 24));
        JButton ButtonDeconnecterPop = new JButton("Se déconnecter");
        ButtonDeconnecterPop.setFont(new java.awt.Font("Arial", 0, 18));
        JButton ButtonAnnulerPop = new JButton("Annuler");
        ButtonAnnulerPop.setFont(new java.awt.Font("Arial", 0, 18));
        JPanel PanelPop = new JPanel();

        PanelPop.add(TxtsavePop);
        PanelPop.add(ButtonDeconnecterPop);
        PanelPop.add(ButtonAnnulerPop);
        pop.add(PanelPop);
        ButtonAnnulerPop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                pop.dispose();
            }
        });
        ButtonDeconnecterPop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                pop.dispose();
                setVisible(false);
                login login = new login("Hesslane");
                login.setResizable(false);
                login.setLocationRelativeTo(null);
                login.setVisible(true);
            }
        });
        pop.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */

    /** stores vector data and password in file (and encrypts it) */
    public void VectorToFile() {
        try {

            File file = new File("loic.joan");

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            SecretKey key = new SecretKeySpec(pswkey.getEncoded(), "AES");
            AES aes = new AES(key);
            bw.write(aes.encrypt(passwordLogin));
            bw.write("\n");
            for (int i = 0; i < idvector.size(); i++) {
                bw.write(aes.encrypt(titlevector.get(i)));
                bw.write("\n");
                bw.write(aes.encrypt(idvector.get(i)));
                bw.write("\n");
                bw.write(aes.encrypt(passwordvector.get(i)));
                bw.write("\n");
                bw.write(aes.encrypt(datevector.get(i)));
                bw.write("\n");
            }
            bw.close();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        issaved = true;
    }

    /**
     * read the file and decrypt the values ​​while storing them in the right place
     */
    void filetovector() {
        try {

            File file = new File("loic.joan");
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line;
            if ((line = br.readLine()) != null) {
                SecretKey key = new SecretKeySpec(pswkey.getEncoded(), "AES");
                AES aes = new AES(key);
                passwordLogin = aes.decrypt(line);
                model = new DefaultListModel<String>();
                while ((line = br.readLine()) != null) {
                    String temp = aes.decrypt(line);
                    titlevector.add(temp);
                    model.addElement(temp);
                    idvector.add(aes.decrypt(br.readLine()));
                    passwordvector.add(aes.decrypt(br.readLine()));
                    datevector.add(aes.decrypt(br.readLine()));
                }
                passwordlist.setModel(model);
            }
            fr.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addinvector;
    private javax.swing.JButton addpswbutton;
    private javax.swing.JMenu apropos;
    private javax.swing.JMenu changepassword;
    private javax.swing.JButton copypsw;
    private javax.swing.JLabel datelabel;
    private javax.swing.JComboBox<String> day;
    private javax.swing.JButton disconnectbutton;
    private javax.swing.JButton generatorbutton;
    private javax.swing.JTextField idfield;
    private javax.swing.JLabel idlabel;
    private javax.swing.JButton infopersobutton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu leavebutton;
    private javax.swing.JComboBox<String> month;
    private javax.swing.JComboBox<String> years;
    private javax.swing.JButton notebutton;
    private javax.swing.JButton passwordbutton;
    private javax.swing.JPasswordField passwordfield;
    private javax.swing.JLabel passwordlabel;
    private javax.swing.JList<String> passwordlist;
    private javax.swing.JCheckBox printpassword;
    private javax.swing.JPanel rightpanel;
    private javax.swing.JMenu saveinfile;
    private javax.swing.JLabel titleapp;
    private javax.swing.JLabel titlefunction;
    private javax.swing.JButton deleteinvector;
    private boolean issaved;
    private Vector<String> titlevector = new Vector<String>();
    private Vector<String> passwordvector = new Vector<String>();
    private Vector<String> idvector = new Vector<String>();
    private Vector<String> datevector = new Vector<String>();
    private int index;
    private DefaultListModel<String> model = new DefaultListModel<String>();
    private String passwordLogin;
    private Key pswkey = new SecretKeySpec("GckINKg<$8Tk5i<FSUUyk_5x".getBytes(), "AES");

    // End of variables declaration//GEN-END:variables
    /** useless but mandatory in the code */
    public void actionPerformed(ActionEvent e) {

    }

    /** get JButton addinvector */
    public javax.swing.JButton getAddinvector() {
        return addinvector;
    }

    /** get the key pswkey */
    public Key getPswkey() {
        return pswkey;
    }

    /** set JButton addinvector */
    public void setAddinvector(javax.swing.JButton addinvector) {
        this.addinvector = addinvector;
    }

    /** get JButton addpswbutton */
    public javax.swing.JButton getAddpswbutton() {
        return addpswbutton;
    }

    /** set JButton addpswbutton */
    public void setAddpswbutton(javax.swing.JButton addpswbutton) {
        this.addpswbutton = addpswbutton;
    }

    /** get JMenu apropos */
    public javax.swing.JMenu getApropos() {
        return apropos;
    }

    /** set JMenu apropos */
    public void setApropos(javax.swing.JMenu apropos) {
        this.apropos = apropos;
    }

    /** get JMenu changepassword */
    public javax.swing.JMenu getChangepassword() {
        return changepassword;
    }

    /** set JMenu changepassword */
    public void setChangepassword(javax.swing.JMenu changepassword) {
        this.changepassword = changepassword;
    }

    /** get JButton copypsw */
    public javax.swing.JButton getCopypsw() {
        return copypsw;
    }

    /** set JButton copypsw */
    public void setCopypsw(javax.swing.JButton copypsw) {
        this.copypsw = copypsw;
    }

    /** get JLabel datelabel */
    public javax.swing.JLabel getDatelabel() {
        return datelabel;
    }

    /** set JLabel datelabel */
    public void setDatelabel(javax.swing.JLabel datelabel) {
        this.datelabel = datelabel;
    }

    /** get JComboBox day */
    public javax.swing.JComboBox<String> getDay() {
        return day;
    }

    /** set JComboBox day */
    public void setDay(javax.swing.JComboBox<String> day) {
        this.day = day;
    }

    /** set JButton Disconnectbutton */
    public javax.swing.JButton getDisconnectbutton() {
        return disconnectbutton;
    }

    /** get JButton disconnectbutton */
    public void setDisconnectbutton(javax.swing.JButton disconnectbutton) {
        this.disconnectbutton = disconnectbutton;
    }

    /** get JButton generatorbutton */
    public javax.swing.JButton getGeneratorbutton() {
        return generatorbutton;
    }

    /** set JButton generatorbutton */
    public void setGeneratorbutton(javax.swing.JButton generatorbutton) {
        this.generatorbutton = generatorbutton;
    }

    /** get JTextField idfield */
    public javax.swing.JTextField getIdfield() {
        return idfield;
    }

    /** set JTextField idfield */
    public void setIdfield(javax.swing.JTextField idfield) {
        this.idfield = idfield;
    }

    /** get JLabel idlabel */
    public javax.swing.JLabel getIdlabel() {
        return idlabel;
    }

    /** set JLabel idlabel */
    public void setIdlabel(javax.swing.JLabel idlabel) {
        this.idlabel = idlabel;
    }

    /** get JButton infopersobutton */
    public javax.swing.JButton getInfopersobutton() {
        return infopersobutton;
    }

    /** set JButton infopersobutton */
    public void setInfopersobutton(javax.swing.JButton infopersobutton) {
        this.infopersobutton = infopersobutton;
    }

    /** get JPanel jPanel1 */
    public javax.swing.JPanel getjPanel1() {
        return jPanel1;
    }

    /** set JPanel jPanel1 */
    public void setjPanel1(javax.swing.JPanel jPanel1) {
        this.jPanel1 = jPanel1;
    }

    /** get JScrollPane jScrollPane1 */
    public javax.swing.JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    /** set JScrollPane jScrollPane1 */
    public void setjScrollPane1(javax.swing.JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    /** get JMenu leavebutton */
    public javax.swing.JMenu getLeavebutton() {
        return leavebutton;
    }

    /** set JMenu leavebutton */
    public void setLeavebutton(javax.swing.JMenu leavebutton) {
        this.leavebutton = leavebutton;
    }

    /** get JComboBox month */
    public javax.swing.JComboBox<String> getMonth() {
        return month;
    }

    /** set JComboBox month */
    public void setMonth(javax.swing.JComboBox<String> month) {
        this.month = month;
    }

    /** get JComboBox years */
    public javax.swing.JComboBox<String> getYears() {
        return years;
    }

    /** set JComboBox years */
    public void setYears(javax.swing.JComboBox<String> years) {
        this.years = years;
    }

    /** get JButton notebutton */
    public javax.swing.JButton getNotebutton() {
        return notebutton;
    }

    /** set JButton notebutton */
    public void setNotebutton(javax.swing.JButton notebutton) {
        this.notebutton = notebutton;
    }

    /** get JButton passwordbutton */
    public javax.swing.JButton getPasswordbutton() {
        return passwordbutton;
    }

    /** set JButton passwordbutton */
    public void setPasswordbutton(javax.swing.JButton passwordbutton) {
        this.passwordbutton = passwordbutton;
    }

    /** get JPasswordField passwordfield */
    public javax.swing.JPasswordField getPasswordfield() {
        return passwordfield;
    }

    /** set JPasswordField passwordfield */
    public void setPasswordfield(javax.swing.JPasswordField passwordfield) {
        this.passwordfield = passwordfield;
    }

    /** get JLabel passwordlabel */
    public javax.swing.JLabel getPasswordlabel() {
        return passwordlabel;
    }

    /** set JLabel passwordlabel */
    public void setPasswordlabel(javax.swing.JLabel passwordlabel) {
        this.passwordlabel = passwordlabel;
    }

    /** get JList passwordlist */
    public javax.swing.JList<String> getPasswordlist() {
        return passwordlist;
    }

    /** set JList passwordlist */
    public void setPasswordlist(javax.swing.JList<String> passwordlist) {
        this.passwordlist = passwordlist;
    }

    /** get JCheckBox Printpassword */
    public javax.swing.JCheckBox getPrintpassword() {
        return printpassword;
    }

    /** set JCheckBox Printpassword */
    public void setPrintpassword(javax.swing.JCheckBox printpassword) {
        this.printpassword = printpassword;
    }

    /** get JPanel Rightpanel */
    public javax.swing.JPanel getRightpanel() {
        return rightpanel;
    }

    /** set JPanel Rightpanel */
    public void setRightpanel(javax.swing.JPanel rightpanel) {
        this.rightpanel = rightpanel;
    }

    /** get Jmenu saveinfile */
    public javax.swing.JMenu getSaveinfile() {
        return saveinfile;
    }

    /** set Jmenu saveinfile */
    public void setSaveinfile(javax.swing.JMenu saveinfile) {
        this.saveinfile = saveinfile;
    }

    /** get JLabel titlleapp */
    public javax.swing.JLabel getTitleapp() {
        return titleapp;
    }

    /** set JLabel titlleapp */
    public void setTitleapp(javax.swing.JLabel titleapp) {
        this.titleapp = titleapp;
    }

    /** get JLabel titlefunction */
    public javax.swing.JLabel getTitlefunction() {
        return titlefunction;
    }

    /** set JLabel titlefunction */
    public void setTitlefunction(javax.swing.JLabel titlefunction) {
        this.titlefunction = titlefunction;
    }

    /** get the value if the file is modified */
    public boolean isIssaved() {
        return issaved;
    }

    /** set the value if the file is modified */
    public void setIssaved(boolean issaved) {
        this.issaved = issaved;
    }

    /** get the vector of title site */
    public Vector<String> getTitlevector() {
        return titlevector;
    }

    /** set the vector of title site */
    public void setTitlevector(Vector<String> titlevector) {
        this.titlevector = titlevector;
    }

    /** get the vector of password */
    public Vector<String> getPasswordvector() {
        return passwordvector;
    }

    /** set the vector of password */
    public void setPasswordvector(Vector<String> passwordvector) {
        this.passwordvector = passwordvector;
    }

    /** get the vector of identifiant */
    public Vector<String> getIdvector() {
        return idvector;
    }

    /** set the vector of identifiant */
    public void setIdvector(Vector<String> idvector) {
        this.idvector = idvector;
    }

    /** get the vector of date */
    public Vector<String> getDatevector() {
        return datevector;
    }

    /** set the vector of date */
    public void setDatevector(Vector<String> datevector) {
        this.datevector = datevector;
    }

    /**
     * get the model
     */
    public int getIndex() {
        return index;
    }

    /**
     * set the index for the JList
     */
    public void setIndex(int index) {
        this.index = index;
    }

    /**
     * get the model
     */
    public DefaultListModel<String> getModel() {
        return model;
    }

    /**
     * set the model and update the JList
     */
    public void setModel(DefaultListModel<String> model) {

        this.model = model;
    }
}